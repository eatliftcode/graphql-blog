type Query {
    me: User
    posts: [Post!]!
    profile(userId: ID!): Profile
}

type Mutation {
    postCreate(post: PostInput!) : PostPayload!
    postUpdate(postId: ID!, post: PostInput!) : PostPayload!
    postDelete(postId: ID!): PostPayload!
    postPublishUnPublish(postId: ID!, publish: Boolean!) : PostPayload!
    signUp(credentials: CredentialsInput!, name: String!, bio: String!): UserPayLoad!
    signIn(credentials: CredentialsInput!): UserPayLoad!
}
type PostPayload {
    userErrors: [UserError!]!
    post: Post
}

type UserPayLoad {
    userErrors: [UserError!]!
    token: String
}

type UserError{
    message: String!
}

type Post {
    id : ID!
    title: String!
    content: String!
    createdAt: String!
    published: Boolean!
    user: User!
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
}

type Profile {
    id: ID!
    bio: String!
    user: User
}

input PostInput{
    title: String
    content: String
}

input CredentialsInput{
    email: String!
    password: String!
}